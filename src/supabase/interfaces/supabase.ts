/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

import { Card } from './card.interface';

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/decks': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.decks.id'];
          author_id?: parameters['rowFilter.decks.author_id'];
          visibility?: parameters['rowFilter.decks.visibility'];
          title?: parameters['rowFilter.decks.title'];
          description?: parameters['rowFilter.decks.description'];
          cards?: parameters['rowFilter.decks.cards'];
          created_at?: parameters['rowFilter.decks.created_at'];
          updated_at?: parameters['rowFilter.decks.updated_at'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['decks'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** decks */
          decks?: definitions['decks'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.decks.id'];
          author_id?: parameters['rowFilter.decks.author_id'];
          visibility?: parameters['rowFilter.decks.visibility'];
          title?: parameters['rowFilter.decks.title'];
          description?: parameters['rowFilter.decks.description'];
          cards?: parameters['rowFilter.decks.cards'];
          created_at?: parameters['rowFilter.decks.created_at'];
          updated_at?: parameters['rowFilter.decks.updated_at'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.decks.id'];
          author_id?: parameters['rowFilter.decks.author_id'];
          visibility?: parameters['rowFilter.decks.visibility'];
          title?: parameters['rowFilter.decks.title'];
          description?: parameters['rowFilter.decks.description'];
          cards?: parameters['rowFilter.decks.cards'];
          created_at?: parameters['rowFilter.decks.created_at'];
          updated_at?: parameters['rowFilter.decks.updated_at'];
        };
        body: {
          /** decks */
          decks?: definitions['decks'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/profiles': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          username?: parameters['rowFilter.profiles.username'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['profiles'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          username?: parameters['rowFilter.profiles.username'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.profiles.id'];
          username?: parameters['rowFilter.profiles.username'];
        };
        body: {
          /** profiles */
          profiles?: definitions['profiles'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/revoked_tokens': {
    get: {
      parameters: {
        query: {
          token?: parameters['rowFilter.revoked_tokens.token'];
          expiration?: parameters['rowFilter.revoked_tokens.expiration'];
          /** Filtering Columns */
          select?: parameters['select'];
          /** Ordering */
          order?: parameters['order'];
          /** Limiting and Pagination */
          offset?: parameters['offset'];
          /** Limiting and Pagination */
          limit?: parameters['limit'];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range'];
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit'];
          /** Preference */
          Prefer?: parameters['preferCount'];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions['revoked_tokens'][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** revoked_tokens */
          revoked_tokens?: definitions['revoked_tokens'];
        };
        query: {
          /** Filtering Columns */
          select?: parameters['select'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          token?: parameters['rowFilter.revoked_tokens.token'];
          expiration?: parameters['rowFilter.revoked_tokens.expiration'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          token?: parameters['rowFilter.revoked_tokens.token'];
          expiration?: parameters['rowFilter.revoked_tokens.expiration'];
        };
        body: {
          /** revoked_tokens */
          revoked_tokens?: definitions['revoked_tokens'];
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn'];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  '/rpc/create_deck': {
    post: {
      parameters: {
        body: {
          args: {
            data: string;
            deck_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  '/rpc/handle_new_user': {
    post: {
      parameters: {
        body: {
          args: { [key: string]: any };
        };
        header: {
          /** Preference */
          Prefer?: parameters['preferParams'];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  decks: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    author_id: string;
    visibility: 'public' | 'private';
    title: string;
    description: string;
    cards: Card[];
    created_at: string;
    updated_at: string;
  };
  profiles: {
    /**
     * Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    id: string;
    username: string;
  };
  revoked_tokens: {
    token: string;
    expiration: string;
  };
}

export interface parameters {
  /** Preference */
  preferParams: 'params=single-object';
  /** Preference */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none';
  /** Preference */
  preferCount: 'count=none';
  /** Filtering Columns */
  select: string;
  /** On Conflict */
  on_conflict: string;
  /** Ordering */
  order: string;
  /** Limiting and Pagination */
  range: string;
  /** Limiting and Pagination */
  rangeUnit: string;
  /** Limiting and Pagination */
  offset: string;
  /** Limiting and Pagination */
  limit: string;
  /** decks */
  'body.decks': definitions['decks'];
  'rowFilter.decks.id': string;
  'rowFilter.decks.author_id': string;
  'rowFilter.decks.visibility': string;
  'rowFilter.decks.title': string;
  'rowFilter.decks.description': string;
  'rowFilter.decks.cards': string;
  'rowFilter.decks.created_at': string;
  'rowFilter.decks.updated_at': string;
  /** profiles */
  'body.profiles': definitions['profiles'];
  'rowFilter.profiles.id': string;
  'rowFilter.profiles.username': string;
  /** revoked_tokens */
  'body.revoked_tokens': definitions['revoked_tokens'];
  'rowFilter.revoked_tokens.token': string;
  'rowFilter.revoked_tokens.expiration': string;
}

export interface operations {}

export interface external {}
